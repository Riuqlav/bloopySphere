---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: authentik
  namespace: auth
spec:
  interval: 5m
  chart:
    spec:
      # renovate: registryUrl=https://charts.goauthentik.io/
      chart: authentik
      version: 5.2.1
      sourceRef:
        kind: HelmRepository
        name: authentik-charts
        namespace: flux-system
      interval: 5m

  dependsOn:
    - name: cert-manager
      namespace: cert-manager

  values:
    fullnameOverride: authentik
    image:
      repository: ghcr.io/goauthentik/server
      tag: 2022.1.3
    authentik:
      outposts:
        docker_image_base: ghcr.io/goauthentik/%(type)s:%(version)s
      secret_key: "${SECRET_AUTHENTIK_SECRET_KEY}"
      postgresql:
        host: "authentik-postgresql"
        name: "authentik"
        user: "authentik"
        password: "${SECRET_AUTHENTIK_POSTGRES_PASSWORD}"
        s3_backup:
          access_key: "${AUTHENTIK_S3_ACCESS_KEY}"
          bucket: "authentik-postgresql-backup"
          secret_key: "${AUTHENTIK_S3_SECRET}"
          host: "https://s3.${XYZ_DOMAIN}"
      redis:
        host: "authentik-redis-master"
      email:
        host: "smtp.sendgrid.net"
        port: 587
        use_tls: true
        username: "apikey"
        password: "${SECRET_SENDGRID_API_KEY}"
        from: "no-reply@${XYZ_DOMAIN}"
    ingress:
      enabled: true
      ingressClassName: "traefik"
      annotations:
        hajimari.io/enable: "true"
        hajimari.io/icon: "account-lock-outline"
        hajimari.io/instance: "bloop-xyz,bloop-quarky"
        hajimari.io/appName: "Login Settings"
        hajimari.io/url: "https://auth.${XYZ_DOMAIN}"
        cert-manager.io/cluster-issuer: "letsencrypt-production"
        traefik.ingress.kubernetes.io/router.entrypoints: "websecure"
        traefik.ingress.kubernetes.io/router.middlewares: "networking-chain-no-auth@kubernetescrd"
      hosts:
        - host: "auth.${XYZ_DOMAIN}"
          paths:
            - path: "/"
              pathType: Prefix
        - host: "auth.${SECRET_DOMAIN}"
          paths:
            - path: "/"
              pathType: Prefix
      tls:
        - hosts:
            - "auth.${SECRET_DOMAIN}"
            - "auth.${XYZ_DOMAIN}"
          secretName: "authentik-tls"
    postgresql:
      enabled: true
      postgresqlPassword: "${SECRET_AUTHENTIK_POSTGRES_PASSWORD}"
    redis:
      enabled: true
    prometheus:
      serviceMonitor:
        create: false

    # Temporary harcoding to pin postgreql
    nodeSelector:
      kubernetes.io/hostname: "slowpoke"

    tolerations:
      - key: "arch"
        operator: "Equal"
        value: "arm64"
        effect: "NoSchedule"
